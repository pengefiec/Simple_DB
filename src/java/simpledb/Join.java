package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate  jp;
    private DbIterator it1;
    private DbIterator it2;
    private Tuple t1=null;
    private boolean flag=false;
    private boolean firstFetch=true;
    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        this.jp=p;
        this.it1=child1;
        this.it2=child2;
    } 
    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.jp;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return it1.getTupleDesc().getFieldName(jp.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return it2.getTupleDesc().getFieldName(jp.getField1());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        TupleDesc mt=TupleDesc.merge(it1.getTupleDesc(),it2.getTupleDesc());
        return mt;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        it1.open();
        it2.open();
        super.open();
    }

    public void close() {
        // some code goes here
        it1.close();
        it2.close();
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        it1.rewind();
        it2.rewind();
        //super.open();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if neededfilter(t1,t2)){.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */

    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        //--initialize at the first time, and then using flag to indicate the it2 has reach the end, make t1 a class variable, to avoid 
        //starting from the first tuple every time fetchNext call, spend tons of time on it!! 
        //The first and last t1 should be deal with separately--
        int l1=it1.getTupleDesc().numFields();
        int l2=it2.getTupleDesc().numFields();
        if(firstFetch&&!it1.hasNext()) return null;
        else firstFetch=false;
        if(it1.hasNext()&&t1==null){
            t1=it1.next();
            Tuple t2=it2.next();                
            if(jp.filter(t1,t2)){
                Tuple result= mergeTuple(t1,t2,l1,l2);
                return result;
            } 
        }
        if(!it1.hasNext()&&!flag){
            while(it2.hasNext()){
                Tuple t2=it2.next();
                if(jp.filter(t1,t2)){
                    return mergeTuple(t1,t2,l1,l2);
                }
                                                                     
            }
            flag=true;
        }
        while(it1.hasNext()){
            if(flag){
                t1=it1.next();
                flag=false;
            }
            while(it2.hasNext()){
                Tuple t2=it2.next();
                if(jp.filter(t1,t2)){
                    return mergeTuple(t1,t2,l1,l2);
                }
                                                                     
            }
            it2.rewind();
            flag=true;
        }
        return null;
    }
    //--helper class, merge 2 tuples if they are mergible--
    private Tuple mergeTuple(Tuple t1, Tuple t2, int l1, int l2){
        TupleDesc mt=getTupleDesc();
        Tuple result=new Tuple(mt);
        //if(jp.filter(t1,t2)){
           // System.out.println("merging:t1: "+t1+" t2: "+t2);                   
            for(int i=0;i<l1;i++){
            result.setField(i,t1.getField(i));
            }
            for(int i=0;i<l2;i++){
                result.setField(l1+i,t2.getField(i));
            }
        //} 
        return result;
    }
    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        DbIterator []its={it1,it2};
        return its;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        it1=children[0];
        it2=children[1];
    }

}
